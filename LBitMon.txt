FUNCTION_BLOCK LBitMon

TITLE = 'Cycle lifebit monitoring'
VERSION: '1.2'
AUTHOR: RoVRy
NAME: LBitMon
FAMILY: UDOCAN

KNOW_HOW_PROTECT

VAR_INPUT

    LB_In { S7_dynamic := 'true' }          : BOOL := FALSE;        //Lifebit input

    Ti    { S7_dynamic := 'true' }          : REAL := 5.0;          //Time [s]

    SampleTime { S7_sampletime := 'true';
                 S7_visible := 'false';
                 S7_link := 'false' }       : REAL := 0.1;          //Sampling time [s]

END_VAR

VAR_OUTPUT

    LB_Out { S7_dynamic := 'true';
             S7_visible := 'false' }        : BOOL := FALSE;        //Lifebit unchanged output

    InvLB_Out { S7_dynamic := 'true' }      : BOOL := TRUE;         //Lifebit inverted output

    Alarm { S7_dynamic := 'true' }          : STRUCT
        Value   : BOOL := FALSE;                                    //Value
        ST      : BYTE := B#16#80;                                  //Signal Status
    END_STRUCT;                                                     //No lifebit alarm output

    TimeRemaining { S7_dynamic := 'true' }  : STRUCT
        Value   : REAL := 0.0;                                      //Value
        ST      : BYTE := B#16#80;                                  //Signal Status
    END_STRUCT;                                                     //Time Remaining [s]

END_VAR

VAR_TEMP
    txPulse         : BOOL;
END_VAR

VAR
    sxFirstCycle    : BOOL := TRUE;
    sxLB_In         : BOOL := FALSE;
    sxAlarm         : BOOL := FALSE;
    srTiRem         : REAL := 0.0;

END_VAR

BEGIN
    
    txPulse := LB_In XOR sxLB_In;

    IF sxFirstCycle OR txPulse THEN
        srTiRem := Ti;
        sxFirstCycle := FALSE;
        sxAlarm := FALSE;
    END_IF;
    
    IF NOT txPulse AND NOT sxAlarm THEN
        srTiRem := srTiRem - SampleTime;
    END_IF;

    IF srTiRem <= 0.0 THEN
        sxAlarm := TRUE;
        srTiRem := 0.0;
    END_IF;
    
// Сохраняем все данные до следующего цикла    
    sxLB_In := LB_In;
    LB_Out := LB_In;
    InvLB_Out := NOT LB_In;
    Alarm.Value := sxAlarm;
    TimeRemaining.Value := srTiRem;
    
END_FUNCTION_BLOCK
